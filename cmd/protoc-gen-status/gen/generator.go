package gen

import (
	"strconv"

	"github.com/go-leo/status/internal/util"
	"github.com/go-leo/status/proto/leo/status"
	"google.golang.org/genproto/googleapis/rpc/code"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
)

type Generator struct {
	Plugin *protogen.Plugin
	File   *protogen.File
}

func NewGenerator(plugin *protogen.Plugin, file *protogen.File) *Generator {
	return &Generator{Plugin: plugin, File: file}
}

func HasDefaultExtension(enum *protogen.Enum) bool {
	return proto.HasExtension(enum.Desc.Options(), status.E_DefaultRpcStatus) && proto.HasExtension(enum.Desc.Options(), status.E_DefaultHttpStatus)
}

func (f *Generator) Generate() {
	_, ok := util.FindFunc(f.File.Enums, HasDefaultExtension)
	if !ok {
		return
	}
	filename := f.File.GeneratedFilenamePrefix + "_status.pb.go"
	g := f.Plugin.NewGeneratedFile(filename, f.File.GoImportPath)
	g.P("// Code generated by protoc-gen-status. DO NOT EDIT.")
	g.P()
	g.P("package ", f.File.GoPackageName)
	g.P()

	for _, enum := range f.File.Enums {
		// 忽略未定义default_rpc_code的枚举
		if !HasDefaultExtension(enum) {
			continue
		}
		for _, value := range enum.Values {
			g.P("var ", f.Clean(value), " = ", f.Err(value), "()")
			g.P()

			g.P("func ", f.Err(value), "(opts ...", OptionIdent, ") ", StatusIdent, " {")
			g.P("return ", NewIdent, "(", f.RpcStatus(enum, value), ", append([]", OptionIdent, "{", HttpStatusIdent, "(", f.HttpStatus(enum, value), "), ", IdentifierIdent, "(", f.Identifier(value), "), ", MessageIdent, "(", f.Message(value), ")}, opts...)...)")
			g.P("}")
			g.P()

			g.P("func ", f.Is(value), "(err error) (", StatusIdent, ", bool) {")
			g.P("st, ok :=", FromIdent, "(err)")
			g.P("if !ok {")
			g.P("return st, false")
			g.P("}")
			g.P("return st, ", f.Clean(value), ".Is(st)")
			g.P("}")
			g.P()
		}
	}
	return
}

func (f *Generator) RpcStatus(enum *protogen.Enum, value *protogen.EnumValue) protogen.GoIdent {
	if proto.HasExtension(value.Desc.Options(), status.E_RpcStatus) {
		rpcCode := proto.GetExtension(value.Desc.Options(), status.E_RpcStatus).(code.Code)
		return f.CodeMethod(rpcCode)
	}
	if proto.HasExtension(enum.Desc.Options(), status.E_DefaultRpcStatus) {
		rpcCode := proto.GetExtension(enum.Desc.Options(), status.E_DefaultRpcStatus).(code.Code)
		return f.CodeMethod(rpcCode)
	}
	return Unknown
}

func (f *Generator) HttpStatus(enum *protogen.Enum, value *protogen.EnumValue) string {
	if proto.HasExtension(value.Desc.Options(), status.E_HttpStatus) {
		rpcCode := proto.GetExtension(value.Desc.Options(), status.E_HttpStatus).(int32)
		return strconv.FormatInt(int64(rpcCode), 10)
	}
	if proto.HasExtension(enum.Desc.Options(), status.E_DefaultHttpStatus) {
		rpcCode := proto.GetExtension(enum.Desc.Options(), status.E_DefaultHttpStatus).(int32)
		return strconv.FormatInt(int64(rpcCode), 10)
	}
	return "500"
}

func (f *Generator) CodeMethod(rpcCode code.Code) protogen.GoIdent {
	i := int(rpcCode)
	if i < 0 && i >= len(CodeMethods) {
		return Unknown
	}
	return CodeMethods[i]
}

func (f *Generator) Err(value *protogen.EnumValue) string {
	return "Err" + string(value.Desc.Name())
}

func (f *Generator) Is(value *protogen.EnumValue) string {
	return "Is" + string(value.Desc.Name())
}

func (f *Generator) Clean(value *protogen.EnumValue) string {
	return "clean_" + f.Err(value)
}

func (f *Generator) Identifier(value *protogen.EnumValue) string {
	return strconv.Quote(value.GoIdent.GoName)
}

func (f *Generator) Message(value *protogen.EnumValue) string {
	if proto.HasExtension(value.Desc.Options(), status.E_Message) {
		return strconv.Quote(proto.GetExtension(value.Desc.Options(), status.E_Message).(string))
	}
	return strconv.Quote("")
}

var (
	RpcCodesPackage    = protogen.GoImportPath("google.golang.org/grpc/codes")
	OK                 = RpcCodesPackage.Ident("OK")
	Canceled           = RpcCodesPackage.Ident("Canceled")
	Unknown            = RpcCodesPackage.Ident("Unknown")
	InvalidArgument    = RpcCodesPackage.Ident("InvalidArgument")
	DeadlineExceeded   = RpcCodesPackage.Ident("DeadlineExceeded")
	NotFound           = RpcCodesPackage.Ident("NotFound")
	AlreadyExists      = RpcCodesPackage.Ident("AlreadyExists")
	PermissionDenied   = RpcCodesPackage.Ident("PermissionDenied")
	ResourceExhausted  = RpcCodesPackage.Ident("ResourceExhausted")
	FailedPrecondition = RpcCodesPackage.Ident("FailedPrecondition")
	Aborted            = RpcCodesPackage.Ident("Aborted")
	OutOfRange         = RpcCodesPackage.Ident("OutOfRange")
	Unimplemented      = RpcCodesPackage.Ident("Unimplemented")
	Internal           = RpcCodesPackage.Ident("Internal")
	Unavailable        = RpcCodesPackage.Ident("Unavailable")
	DataLoss           = RpcCodesPackage.Ident("DataLoss")
	Unauthenticated    = RpcCodesPackage.Ident("Unauthenticated")
	CodeMethods        = []protogen.GoIdent{
		OK,
		Canceled,
		Unknown,
		InvalidArgument,
		DeadlineExceeded,
		NotFound,
		AlreadyExists,
		PermissionDenied,
		ResourceExhausted,
		FailedPrecondition,
		Aborted,
		OutOfRange,
		Unimplemented,
		Internal,
		Unavailable,
		DataLoss,
		Unauthenticated,
	}
)

var (
	StatusPackage   = protogen.GoImportPath("github.com/go-leo/status")
	NewIdent        = StatusPackage.Ident("New")
	OptionIdent     = StatusPackage.Ident("Option")
	IdentifierIdent = StatusPackage.Ident("Identifier")
	HttpStatusIdent = StatusPackage.Ident("HttpStatus")
	MessageIdent    = StatusPackage.Ident("Message")
	StatusIdent     = StatusPackage.Ident("Status")
	FromIdent       = StatusPackage.Ident("From")
)
