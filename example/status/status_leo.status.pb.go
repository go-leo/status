// Code generated by protoc-gen-go-leo. DO NOT EDIT.

package status

import (
	status "github.com/go-leo/status"
)

var clean_ErrInvalidName = ErrInvalidName()

func ErrInvalidName(opts ...status.Option) status.Status {
	return status.InvalidArgument(append([]status.Option{status.Identifier("Errors_InvalidName"), status.Message("名称为空")}, opts...)...)
}

func IsInvalidName(err error) (status.Status, bool) {
	st, ok := status.From(err)
	if !ok {
		return st, false
	}
	return st, clean_ErrInvalidName.Is(st)
}

var clean_ErrFileDownloadFailed = ErrFileDownloadFailed()

func ErrFileDownloadFailed(opts ...status.Option) status.Status {
	return status.Internal(append([]status.Option{status.Identifier("Errors_FileDownloadFailed"), status.Message("文件下载失败")}, opts...)...)
}

func IsFileDownloadFailed(err error) (status.Status, bool) {
	st, ok := status.From(err)
	if !ok {
		return st, false
	}
	return st, clean_ErrFileDownloadFailed.Is(st)
}

var clean_ErrFileUploadFailed = ErrFileUploadFailed()

func ErrFileUploadFailed(opts ...status.Option) status.Status {
	return status.Internal(append([]status.Option{status.Identifier("Errors_FileUploadFailed")}, opts...)...)
}

func IsFileUploadFailed(err error) (status.Status, bool) {
	st, ok := status.From(err)
	if !ok {
		return st, false
	}
	return st, clean_ErrFileUploadFailed.Is(st)
}
