// Code generated by protoc-gen-status. DO NOT EDIT.

package status

import (
	status "github.com/go-leo/status"
	codes "google.golang.org/grpc/codes"
)

var clean_ErrErrDefault = ErrErrDefault()

func ErrErrDefault(opts ...status.Option) status.Status {
	return status.New(codes.Internal, append([]status.Option{status.HttpStatus(500), status.Identifier("Errors_ErrDefault"), status.Message("")}, opts...)...)
}

func IsErrDefault(err error) (status.Status, bool) {
	st, ok := status.From(err)
	if !ok {
		return st, false
	}
	return st, clean_ErrErrDefault.Is(st)
}

var clean_ErrErrJustRpcStatus = ErrErrJustRpcStatus()

func ErrErrJustRpcStatus(opts ...status.Option) status.Status {
	return status.New(codes.InvalidArgument, append([]status.Option{status.HttpStatus(500), status.Identifier("Errors_ErrJustRpcStatus"), status.Message("")}, opts...)...)
}

func IsErrJustRpcStatus(err error) (status.Status, bool) {
	st, ok := status.From(err)
	if !ok {
		return st, false
	}
	return st, clean_ErrErrJustRpcStatus.Is(st)
}

var clean_ErrErrJustHttpStatus = ErrErrJustHttpStatus()

func ErrErrJustHttpStatus(opts ...status.Option) status.Status {
	return status.New(codes.Internal, append([]status.Option{status.HttpStatus(400), status.Identifier("Errors_ErrJustHttpStatus"), status.Message("")}, opts...)...)
}

func IsErrJustHttpStatus(err error) (status.Status, bool) {
	st, ok := status.From(err)
	if !ok {
		return st, false
	}
	return st, clean_ErrErrJustHttpStatus.Is(st)
}

var clean_ErrErrJustMessage = ErrErrJustMessage()

func ErrErrJustMessage(opts ...status.Option) status.Status {
	return status.New(codes.Internal, append([]status.Option{status.HttpStatus(500), status.Identifier("Errors_ErrJustMessage"), status.Message("just message")}, opts...)...)
}

func IsErrJustMessage(err error) (status.Status, bool) {
	st, ok := status.From(err)
	if !ok {
		return st, false
	}
	return st, clean_ErrErrJustMessage.Is(st)
}

var clean_ErrErrAllHave = ErrErrAllHave()

func ErrErrAllHave(opts ...status.Option) status.Status {
	return status.New(codes.InvalidArgument, append([]status.Option{status.HttpStatus(401), status.Identifier("Errors_ErrAllHave"), status.Message("normal")}, opts...)...)
}

func IsErrAllHave(err error) (status.Status, bool) {
	st, ok := status.From(err)
	if !ok {
		return st, false
	}
	return st, clean_ErrErrAllHave.Is(st)
}
