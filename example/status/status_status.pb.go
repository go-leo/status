// Code generated by protoc-gen-status. DO NOT EDIT.

package status

import (
	status "github.com/go-leo/status"
	codes "google.golang.org/grpc/codes"
)

var clean_ErrDefault = ErrDefault()

func ErrDefault(opts ...status.Option) status.Status {
	return status.New(codes.Internal, append([]status.Option{status.HttpStatus(500), status.Identifier("Errors_Default"), status.Message("")}, opts...)...)
}

func IsDefault(err error) (status.Status, bool) {
	st, ok := status.From(err)
	if !ok {
		return st, false
	}
	return st, clean_ErrDefault.Is(st)
}

var clean_ErrJustRpcStatus = ErrJustRpcStatus()

func ErrJustRpcStatus(opts ...status.Option) status.Status {
	return status.New(codes.InvalidArgument, append([]status.Option{status.HttpStatus(500), status.Identifier("Errors_JustRpcStatus"), status.Message("")}, opts...)...)
}

func IsJustRpcStatus(err error) (status.Status, bool) {
	st, ok := status.From(err)
	if !ok {
		return st, false
	}
	return st, clean_ErrJustRpcStatus.Is(st)
}

var clean_ErrJustHttpStatus = ErrJustHttpStatus()

func ErrJustHttpStatus(opts ...status.Option) status.Status {
	return status.New(codes.Internal, append([]status.Option{status.HttpStatus(400), status.Identifier("Errors_JustHttpStatus"), status.Message("")}, opts...)...)
}

func IsJustHttpStatus(err error) (status.Status, bool) {
	st, ok := status.From(err)
	if !ok {
		return st, false
	}
	return st, clean_ErrJustHttpStatus.Is(st)
}

var clean_ErrJustMessage = ErrJustMessage()

func ErrJustMessage(opts ...status.Option) status.Status {
	return status.New(codes.Internal, append([]status.Option{status.HttpStatus(500), status.Identifier("Errors_JustMessage"), status.Message("just message")}, opts...)...)
}

func IsJustMessage(err error) (status.Status, bool) {
	st, ok := status.From(err)
	if !ok {
		return st, false
	}
	return st, clean_ErrJustMessage.Is(st)
}

var clean_ErrAllHave = ErrAllHave()

func ErrAllHave(opts ...status.Option) status.Status {
	return status.New(codes.InvalidArgument, append([]status.Option{status.HttpStatus(401), status.Identifier("Errors_AllHave"), status.Message("all have")}, opts...)...)
}

func IsAllHave(err error) (status.Status, bool) {
	st, ok := status.From(err)
	if !ok {
		return st, false
	}
	return st, clean_ErrAllHave.Is(st)
}
